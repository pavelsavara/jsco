import { createLifting, createLowering } from '../binding';
import { js, abi } from './hello';
import { ComponentExports, ComponentFactory, ComponentFactoryInput, ComponentFactoryOptions, ComponentImports, Tcabi_realloc } from './types';
import { WITModel, parse } from '../parser';
import { AbiPointer, AbiSize, BindingContext } from '../binding/types';
import { PrimitiveValType } from '../model/types';

export async function createComponent<JSExports>(
    modelOrComponentOrUrl: ComponentFactoryInput,
    imports?: ComponentImports,
    options?: ComponentFactoryOptions
) {
    let input = modelOrComponentOrUrl as any;
    if (typeof input !== 'object' || input.tag !== 'model') {
        input = await parse(input);
    }
    return createComponentFactory<JSExports>(input)(imports, options);
}

// to learn how it works, this is code generated by JCO, slowly being replaced by JSCO
export function createComponentFactory<JSExports>(witModel: WITModel): ComponentFactory<JSExports> {
    return async (imports?: ComponentImports, options?: ComponentFactoryOptions): Promise<ComponentExports<JSExports>> => {
        const wasmInstantiate = options?.wasmInstantiate ?? WebAssembly.instantiate;
        function getView(pointer?: number, len?: number) {
            return new DataView(memory0.buffer, pointer, len);
        }

        const ctx: BindingContext = {
            utf8Decoder: new TextDecoder(),
            utf8Encoder: new TextEncoder(),
            getView,
            getMemory: () => {
                return memory0;
            },
            realloc(oldPtr, oldSize, align, newSize) {
                return cabi_realloc(oldPtr, oldSize, align, newSize);
            },
            alloc: (newSize: AbiSize, align: AbiSize) => {
                return cabi_realloc(0 as any, 0 as any, align, newSize);
            },
            readI32: (ptr: AbiPointer) => {
                return getView().getInt32(ptr);
            },
            writeI32: (ptr: AbiPointer, value: number) => {
                return getView().setInt32(ptr, value);
            }
        };

        const componentImports = (imports ? imports : {}) as {
            'hello:city/city': js.Imports,
        };

        const { sendMessage } = componentImports['hello:city/city'];
        const stringToJs = createLowering({
            tag: 'ComponentValTypePrimitive',
            value: PrimitiveValType.String,
        });

        const stringFromJs = createLifting({
            tag: 'ComponentValTypePrimitive',
            value: PrimitiveValType.String,
        });

        function sendMessageFromAbi(ptr: AbiPointer, len: AbiPointer) {
            const ptr0 = ptr;
            const len0 = len;
            const result0 = stringToJs(ctx, ptr0, len0);
            sendMessage(result0);
        }

        function runToAbi(info: js.CityInfo) {
            const args = stringFromJs(ctx, info.name);
            exports0['hello:city/greeter#run'](args[0], args[1]);
        }

        const module0: WebAssembly.Module = await witModel.modules[0].module!;
        const module1: WebAssembly.Module = await witModel.modules[1].module!;
        const module2: WebAssembly.Module = await witModel.modules[2].module!;

        const exports1 = (await wasmInstantiate(module1)).exports as abi.module1Exports;

        const imports0: abi.module0Imports = {
            'hello:city/city': {
                'send-message': exports1['0'],
            },
        };
        const exports0 = (await wasmInstantiate(module0, imports0)).exports as abi.module0Exports;

        const cabi_realloc: Tcabi_realloc = exports0.cabi_realloc;
        const memory0 = exports0.memory as WebAssembly.Memory;

        const imports2: abi.module2Imports = {
            '': {
                $imports: exports1.$imports,
                '0': sendMessageFromAbi,
            },
        };

        await wasmInstantiate(module2, imports2);

        const greeter0_1_0: js.Exports = {
            run: runToAbi,
        };

        return {
            greeter: greeter0_1_0,
            'hello:city/greeter': greeter0_1_0
        } as any;
    };
}